@model IEnumerable<NiceBytes.Veterinary.Models.ClientsModel>
@using Newtonsoft.Json;
@{
    ViewBag.Title = "Index";

}


<script src="~/Scripts/knockout-3.3.0.js"></script>

<div class="row" id="clientsRow">
    
    <div class="col-sm-5 col-md-5 col-lg-5">
        <div class="input-group fill-parent">
            <input type="text" class="form-control" placeholder="Buscar..." name="srch-term" id="srch-term" data-bind="value:query">
            <div class="input-group-btn pull-left">
                <button class="btn btn-default"><span class="glyphicon glyphicon-search"></span></button>
            </div>
        </div>
    </div>
    
    @*<input type="text" class="form-control" placeholder="Buscar..." name="srch-term" id="srch-term" data-bind="value:query">
    <div class="input-group-btn pull-left">
        <button class="btn btn-default"><span class="glyphicon glyphicon-search"></span></button>
    </div>*@
    <div class="col-sm-3 col-md-3 col-lg-3 pull-right margin-right-20">
        <button data-bind="click: $root.add" class="btn btn-default">
            Agregar Nuevo
            <span class="glyphicon glyphicon-plus"></span>
        </button>
    </div>
    <div id="gridClients">
        <div class="panel panel-default">
            <div class="panel-body">
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Socio</th>
                            <th>Nombre</th>
                            <th>Apellido</th>
                            <th>Email</th>
                            <th>Teléfono</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody data-bind="foreach: currentClients">
                        <tr data-bind="click: $parent.select">
                            <td data-bind="text:ClientNumber"></td>
                            <td data-bind="text:FirstName"></td>
                            <td data-bind="text:LastName"></td>
                            <td data-bind="text:Email"></td>
                            <td data-bind="text:PhoneNumber"></td>
                            <td>
                                <button data-bind="click: $root.viewPets" class="btn btn-default">
                                    <img src="~/icon-dog.png" />
                                </button>
                                <button data-bind="click: $root.edit" class="btn btn-default">
                                    <span class="glyphicon glyphicon-pencil"></span>
                                </button>
                                <button data-bind="click: $root.delete" class="btn btn-default">
                                    <span class="glyphicon glyphicon-trash"></span>
                                </button>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div class="panel-footer">
                <table>
                    <tfoot>
                        <tr>
                            <td colspan="2">
                                <span data-bind="click:previousPage" class="glyphicon glyphicon-circle-arrow-left" style="cursor:pointer;"></span>
                                <span data-bind="text: currentPageIndex() + 1"></span>
                                <span data-bind="click:nextPage" class="glyphicon glyphicon-circle-arrow-right" style="cursor:pointer;"></span>
                            </td>
                        </tr>
                    </tfoot>
                </table>
            </div>
        </div>
    </div>
</div>


<div id="result">

</div>

<script>
    debugger;
    var clientSelected = null;

    function ClientsViewModel() {
        var self = this;
        debugger;

        // properties
        self.clients = ko.observableArray(@Html.Raw(JsonConvert.SerializeObject(Model, new JsonSerializerSettings{ReferenceLoopHandling = ReferenceLoopHandling.Ignore})));

        //self.pageSize = ko.observable(4);
        //self.lastPage = Math.ceil(self.clients().length / self.pageSize);
        this.currentPageIndex = ko.observable(0);
        this.nbPerPage = 2;
        this.totalPages = ko.computed(function () {
            var div = Math.floor(self.clients().length / self.nbPerPage);
            div += self.clients().length % self.nbPerPage > 0 ? 1 : 0;
            return div - 1;
        });

        this.paginated = ko.computed(function () {
            var first = self.currentPageIndex() * self.nbPerPage;
            return self.clients.slice(first, first + self.nbPerPage);
        });
        this.hasPrevious = ko.computed(function () {
            return self.currentPageIndex() !== 0;
        });
        this.hasNext = ko.computed(function () {
            return self.currentPageIndex() !== self.totalPages();
        });
        this.nextPage = function () {
            if (self.currentPageIndex() < self.totalPages()) {
                self.currentPageIndex(self.currentPageIndex() + 1);
            }
        }

        this.previousPage = function () {
            if (self.currentPageIndex() != 0) {
                self.currentPageIndex(self.currentPageIndex() - 1);
            }
        }
        /*
        self.currentClients = ko.computed(function () {
            var startIndex = (self.currentPage() - 1) * self.pageSize;
            var endIndex = startIndex + self.pageSize;
            return self.clients().slice(startIndex, endIndex);
        });


        // methods
        self.nextPage = function () {
            self.currentPage(self.currentPage() + 1);
        };
        self.previousPage = function () {
            self.currentPage(self.currentPage() - 1);
        };
        */

        self.query = ko.observable("");
        //identify the first matching item by name

        self.currentClients = ko.computed(function () {
            var clientsArray = self.clients();
            if (self.query().length > 0) {
                
                return ko.utils.arrayFilter(clientsArray, function (item) {
                    return ko.utils.stringStartsWith(item.FirstName.toLowerCase(), self.query().toLowerCase())
                });
            } else {
                var first = self.currentPageIndex() * self.nbPerPage;
                return clientsArray.slice(first, first + self.nbPerPage);
                //return clientsArray.slice(startIndex, endIndex);
            }
        });

        self.select = function (item) {
            clientSelected = item.ClientNumber;
        };

        self.selected = ko.observable(self.clients()[0]);

        self.viewPets = function (item) {
            var Client = item.Id;
            $.ajax({
                prop: 'href',
                url: '@Url.Action("Index", "Pets")',
                data: { id: Client },
                type: 'GET',
                dataType: 'HTML',  // add this line
                success: function (result) {
                    $('#result').empty();
                    $('#result').html(result);
                }
            });
        }

        self.add = function () {
            debugger;
            $.ajax({
                prop: 'href',
                url: '@Url.Action("Create", "Clients")',
                type: 'GET',
                dataType: 'HTML',  // add this line
                success: function (result) {
                    $('#result').empty();
                    $('#result').html(result);
                }
            });
        }

        self.edit = function (item) {
            var Client = item.ClientNumber;
            $.ajax({
                prop: 'href',
                url: '@Url.Action("Edit", "Clients")',
                type: 'GET',
                data: { id: Client },
                dataType: 'HTML',  // add this line
                success: function (result) {
                    $('#result').empty();
                    $('#result').html(result);
                }
            });
        }

        self.delete = function (Client) {
            if (confirm('¿Desea eliminar a socio "' + Client.FirstName + " " + Client.LastName + '"?')) {
                var clientNum = Client.ClientNumber;
                $.ajax({
                    url: '@Url.Action("Delete", "Clients")',
                    cache: false,
                    type: 'POST',
                    data: { id: clientNum },
                    success: function (data) {
                        self.clients.remove(Client);
                        $('#result').empty();
                    }
                }).fail(
                function (xhr, textStatus, err) {
                });
            }
        }

    };

    ko.utils.stringStartsWith = function (string, startsWith) {
        string = string || "";
        if (startsWith.length > string.length)
            return false;
        return string.substring(0, startsWith.length) === startsWith;
    };


    ko.applyBindings(new ClientsViewModel(), document.getElementById("clientsRow"));


</script>
